{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-snippet",
  "type": "registry:component",
  "title": "Code Snippet",
  "description": "A simple component to display a code snippet with a copy button, and multiple language options via tabs",
  "registryDependencies": [
    "tabs",
    "button",
    "prism-react-renderer"
  ],
  "files": [
    {
      "path": "registry/code-snippet/code-snippet.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { IconCopy, IconCheck } from \"@tabler/icons-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Highlight, themes } from \"prism-react-renderer\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CodeSnippetProps {\n    code?: string;\n    language?: string;\n    variant?: \"default\" | \"minimal\";\n    className?: string;\n    containerClassName?: string;\n    preClassName?: string;\n    tabsListClassName?: string;\n    tabsTriggerClassName?: string;\n    tabsContentClassName?: string;\n    copyButtonClassName?: string;\n    tabs?: {\n        label: string;\n        code: string;\n        language?: string;\n    }[];\n}\n\nconst CodeSnippet = React.forwardRef<HTMLDivElement, CodeSnippetProps>(\n    (\n        {\n            code = \"\",\n            language = \"bash\",\n            variant = \"default\",\n            className,\n            containerClassName,\n            preClassName,\n            tabsListClassName,\n            tabsTriggerClassName,\n            tabsContentClassName,\n            copyButtonClassName,\n            tabs,\n        },\n        ref\n    ) => {\n        const [copied, setCopied] = React.useState(false);\n\n        const copyToClipboard = async (textToCopy: string) => {\n            await navigator.clipboard.writeText(textToCopy);\n            setCopied(true);\n            setTimeout(() => setCopied(false), 2000);\n        };\n\n        const CodeBlock = ({\n            code,\n            language,\n        }: {\n            code: string;\n            language: string;\n        }) => (\n            <Highlight theme={themes.vsDark} code={code} language={language}>\n                {({\n                    className,\n                    style,\n                    tokens,\n                    getLineProps,\n                    getTokenProps,\n                }) => (\n                    <pre\n                        className={cn(\n                            className,\n                            \"overflow-auto !bg-transparent px-2 text-xs !text-foreground\",\n                            preClassName\n                        )}\n                        style={style}\n                    >\n                        {tokens.map((line, i) => (\n                            <div key={i} {...getLineProps({ line })}>\n                                {line.map((token, key) => (\n                                    <span\n                                        key={key}\n                                        {...getTokenProps({ token })}\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    </pre>\n                )}\n            </Highlight>\n        );\n\n        const CopyButton = ({ textToCopy }: { textToCopy: string }) => (\n            <Button\n                onClick={() => copyToClipboard(textToCopy)}\n                size=\"icon\"\n                variant=\"outline\"\n                className={cn(\n                    \"h-auto w-auto p-2 opacity-0 transition-opacity group-hover:opacity-100\",\n                    copyButtonClassName\n                )}\n            >\n                {copied ? (\n                    <IconCheck className=\"h-4 w-4\" />\n                ) : (\n                    <IconCopy className=\"h-4 w-4\" />\n                )}\n            </Button>\n        );\n\n        if (variant === \"minimal\") {\n            return (\n                <div\n                    className={cn(\n                        \"group flex items-center justify-between gap-3 rounded-md border bg-card p-3\",\n                        containerClassName\n                    )}\n                >\n                    <CodeBlock code={code} language={language} />\n                    <CopyButton textToCopy={code} />\n                </div>\n            );\n        }\n\n        return (\n            <Tabs defaultValue=\"0\" className=\"w-full\">\n                <TabsList\n                    className={cn(\n                        \"flex h-auto w-full items-center justify-start rounded-b-none border-b bg-card\",\n                        tabsListClassName\n                    )}\n                >\n                    {tabs?.map((tab, index) => (\n                        <TabsTrigger\n                            key={index}\n                            value={index.toString()}\n                            className={tabsTriggerClassName}\n                        >\n                            {tab.label}\n                        </TabsTrigger>\n                    ))}\n                </TabsList>\n                {tabs?.map((tab, index) => (\n                    <TabsContent\n                        key={index}\n                        value={index.toString()}\n                        className=\"mt-0\"\n                    >\n                        <div\n                            className={cn(\n                                \"group flex items-center justify-between rounded-b-md bg-card p-2\",\n                                tabsContentClassName\n                            )}\n                        >\n                            <CodeBlock\n                                code={tab.code}\n                                language={tab.language ?? language}\n                            />\n                            <CopyButton textToCopy={tab.code} />\n                        </div>\n                    </TabsContent>\n                ))}\n            </Tabs>\n        );\n    }\n);\n\nCodeSnippet.displayName = \"CodeSnippet\";\n\nexport { CodeSnippet };\n",
      "type": "registry:component",
      "target": "components/tomui/code-snippet.tsx"
    }
  ]
}