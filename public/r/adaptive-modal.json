{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "adaptive-modal",
  "type": "registry:component",
  "title": "Adaptive Modal",
  "description": "A single modal that you can use to display any content, depending on if mobile or not. If you're viewing on a mobile device, the modal will always be a drawer. Using the variant prop you can choose between a sheet, dialog or popover.",
  "registryDependencies": [
    "dialog",
    "sheet",
    "popover"
  ],
  "files": [
    {
      "path": "registry/adaptive-modal/components/adaptive-modal.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport {\n    Sheet,\n    SheetContent,\n    SheetDescription,\n    SheetHeader,\n    SheetTitle,\n    SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n    DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n    Popover,\n    PopoverContent,\n    PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n    Drawer,\n    DrawerContent,\n    DrawerDescription,\n    DrawerHeader,\n    DrawerTitle,\n    DrawerTrigger,\n    DrawerFooter,\n} from \"@/components/ui/drawer\";\nimport { Label } from \"@/components/ui/label\";\n\ntype VariantType = \"sheet\" | \"dialog\" | \"popover\";\n\nconst ModalContext = React.createContext<VariantType>(\"sheet\");\n\ninterface ModalProps {\n    children: React.ReactNode;\n    variant?: VariantType;\n    forceMobile?: boolean;\n}\n\nconst useModalVariant = () => React.useContext(ModalContext);\n\nconst AdaptiveModal = React.forwardRef<HTMLDivElement, ModalProps>(\n    ({ children, variant = \"sheet\", forceMobile }, ref) => {\n        const isMobile = useIsMobile();\n        const shouldUseMobileVersion = forceMobile || isMobile;\n\n        if (shouldUseMobileVersion) {\n            return <Drawer shouldScaleBackground>{children}</Drawer>;\n        }\n\n        return (\n            <ModalContext.Provider value={variant}>\n                {variant === \"dialog\" && <Dialog>{children}</Dialog>}\n                {variant === \"popover\" && <Popover>{children}</Popover>}\n                {variant === \"sheet\" && <Sheet>{children}</Sheet>}\n            </ModalContext.Provider>\n        );\n    }\n);\nAdaptiveModal.displayName = \"AdaptiveModal\";\n\nconst AdaptiveModalTrigger = React.forwardRef<\n    HTMLButtonElement,\n    React.ComponentPropsWithoutRef<typeof SheetTrigger>\n>(({ ...props }, ref) => {\n    const variant = useModalVariant();\n    const isMobile = useIsMobile();\n\n    if (isMobile) {\n        return <DrawerTrigger ref={ref} asChild {...props} />;\n    }\n\n    switch (variant) {\n        case \"dialog\":\n            return <DialogTrigger ref={ref} asChild {...props} />;\n        case \"popover\":\n            return <PopoverTrigger ref={ref} asChild {...props} />;\n        default:\n            return <SheetTrigger ref={ref} asChild {...props} />;\n    }\n});\nAdaptiveModalTrigger.displayName = \"AdaptiveModalTrigger\";\n\nconst AdaptiveModalContent = React.forwardRef<\n    HTMLDivElement,\n    Omit<React.ComponentPropsWithoutRef<typeof SheetContent>, \"variant\">\n>(({ className, children, side, ...props }, ref) => {\n    const variant = useModalVariant();\n    const isMobile = useIsMobile();\n\n    if (isMobile) {\n        return (\n            <DrawerContent\n                className={cn(\"z-[9999999999] max-h-[80dvh] px-4\", className)}\n                {...props}\n            >\n                {children}\n            </DrawerContent>\n        );\n    }\n\n    switch (variant) {\n        case \"dialog\":\n            return (\n                <DialogContent\n                    className={cn(\"p-4 sm:max-w-[425px]\", className)}\n                    {...props}\n                >\n                    {children}\n                </DialogContent>\n            );\n        case \"popover\":\n            return (\n                <PopoverContent\n                    className={cn(\"w-[425px]\", className)}\n                    {...props}\n                >\n                    {children}\n                </PopoverContent>\n            );\n        default:\n            return (\n                <SheetContent\n                    side={side}\n                    className={cn(\"p-4\", className)}\n                    {...props}\n                >\n                    {children}\n                </SheetContent>\n            );\n    }\n});\nAdaptiveModalContent.displayName = \"AdaptiveModalContent\";\n\nconst AdaptiveModalHeader = ({\n    className,\n    ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n    const variant = useModalVariant();\n    const isMobile = useIsMobile();\n\n    if (isMobile) {\n        return (\n            <DrawerHeader\n                className={cn(\"justify-start px-0 pt-0 text-left\", className)}\n                {...props}\n            />\n        );\n    }\n\n    switch (variant) {\n        case \"dialog\":\n            return <DialogHeader className={cn(\"\", className)} {...props} />;\n        case \"sheet\":\n            return (\n                <SheetHeader\n                    className={cn(\"space-y-0 pb-2\", className)}\n                    {...props}\n                />\n            );\n        default:\n            return (\n                <div\n                    className={cn(\n                        \"flex flex-col pb-2 text-center sm:text-left\",\n                        className\n                    )}\n                    {...props}\n                />\n            );\n    }\n};\nAdaptiveModalHeader.displayName = \"AdaptiveModalHeader\";\n\nconst AdaptiveModalTitle = React.forwardRef<\n    HTMLHeadingElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => {\n    const variant = useModalVariant();\n    const isMobile = useIsMobile();\n\n    if (isMobile) {\n        return <DrawerTitle ref={ref} {...props} />;\n    }\n\n    switch (variant) {\n        case \"dialog\":\n            return <DialogTitle ref={ref} {...props} />;\n        case \"sheet\":\n            return <SheetTitle ref={ref} {...props} />;\n        default:\n            return (\n                <p\n                    className={cn(\n                        \"text-lg font-semibold leading-none tracking-tight\",\n                        className\n                    )}\n                    ref={ref}\n                    {...props}\n                />\n            );\n    }\n});\nAdaptiveModalTitle.displayName = \"AdaptiveModalTitle\";\n\nconst AdaptiveModalDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n    const variant = useModalVariant();\n    const isMobile = useIsMobile();\n\n    if (isMobile) {\n        return <DrawerDescription ref={ref} {...props} />;\n    }\n\n    switch (variant) {\n        case \"dialog\":\n            return <DialogDescription ref={ref} {...props} />;\n        case \"sheet\":\n            return <SheetDescription ref={ref} {...props} />;\n        default: {\n            return (\n                <p\n                    ref={ref}\n                    className={cn(\"text-sm text-muted-foreground\", className)}\n                    {...props}\n                />\n            );\n        }\n    }\n});\nAdaptiveModalDescription.displayName = \"AdaptiveModalDescription\";\n\nconst AdaptiveModalFooter = ({\n    className,\n    ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n    const variant = useModalVariant();\n    const isMobile = useIsMobile();\n\n    if (isMobile) {\n        return <DrawerFooter {...props} />;\n    }\n\n    switch (variant) {\n        case \"dialog\":\n            return <DialogFooter {...props} />;\n        default:\n            return (\n                <div\n                    className={cn(\n                        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n                        className\n                    )}\n                    {...props}\n                />\n            );\n    }\n};\nAdaptiveModalFooter.displayName = \"AdaptiveModalFooter\";\n\nexport {\n    AdaptiveModal,\n    AdaptiveModalTrigger,\n    AdaptiveModalContent,\n    AdaptiveModalHeader,\n    AdaptiveModalTitle,\n    AdaptiveModalDescription,\n    AdaptiveModalFooter,\n};\n",
      "type": "registry:component",
      "target": "components/tomui/adaptive.modal.tsx"
    },
    {
      "path": "registry/adaptive-modal/hooks/use-mobile.tsx",
      "content": "import * as React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n    const [isMobile, setIsMobile] = React.useState<boolean | undefined>(\n        undefined\n    );\n\n    React.useEffect(() => {\n        const mql = window.matchMedia(\n            `(max-width: ${MOBILE_BREAKPOINT - 1}px)`\n        );\n        const onChange = () => {\n            setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n        };\n        mql.addEventListener(\"change\", onChange);\n        setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n        return () => mql.removeEventListener(\"change\", onChange);\n    }, []);\n\n    return !!isMobile;\n}\n",
      "type": "registry:hook"
    }
  ]
}